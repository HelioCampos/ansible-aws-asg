- include: asg_ec2.yaml
  when: ec2_load_balancer is not defined

- include: asg_elb.yaml
  when: ec2_load_balancer is defined

- name: Configure Scaling Policies
  ec2_scaling_policy:
    region: "{{ region }}"
    name: "{{ item.name }}"
    asg_name: "{{ aws_asg.name }}"
    state: "{{ state | default('present') }}"
    adjustment_type: "{{ item.adjustment_type }}"
    min_adjustment_step: "{{ item.min_adjustment_step }}"
    scaling_adjustment: "{{ item.scaling_adjustment }}"
    cooldown: "{{ item.cooldown }}"
  with_items:
    ## Scale up
    - name: "{{ aws_asg.name }}-ScaleUp Policy"
      adjustment_type: "ChangeInCapacity"
      scaling_adjustment: "{{ aws_asg_scaleup_adjustment | default('+1') }}"
      min_adjustment_step: "{{ aws_asg_scaleup_min_adjustment_step | default(omit) }}"
      cooldown: "{{ aws_asg_scaleup_cooldown | default(300) }}"
    ## Scale down
    - name: "{{ aws_asg.name }}-ScaleDown Policy"
      adjustment_type: "ChangeInCapacity"
      scaling_adjustment: "{{ aws_asg_scaledown_adjustment | default('-1')  }}"
      min_adjustment_step: "{{ aws_asg_scaldown_min_adjustment_step | default(omit) }}"
      cooldown: "{{ aws_asg_scaleup_cooldown | default(300) }}"
  register: ec2_scaling_policy_result
- debug: var=ec2_scaling_policy_result
#
## Create LOW CloudWatch Alarms for the AS Group
- name: Update EC2 Low Metric Alarms
  ec2_metric_alarm:
    state: "{{ state | default('present') }}"
    region: "{{ region }}"
    name: "{{ item.name  }}"
    metric: "{{ item.metric }}"
    namespace: "{{ item.namespace }}"
    statistic: "{{ item.statistic }}"
    comparison: "{{ item.comparison }}"
    threshold: "{{ item.threshold }}"
    period: "{{ item.period }}"
    evaluation_periods: "{{ item.evaluation_periods }}"
    unit: "{{ item.unit }}"
    description: "{{ item.description }}"
    dimensions: "{{ item.dimensions }}"
    alarm_actions:
      - "{{ ec2_scaling_policy_result.results[1].arn }}"
  with_items: "{{ ec2_metric_alarms_down }}"
  register: aws_ec2_metric_alarm_low_result
- debug: var=aws_ec2_metric_alarm_low_result
#â€‹
## Create HIGH CloudWatch Alarms for the AS Group
- name: Update EC2 High Metric Alarms
  ec2_metric_alarm:
    state: "{{ state | default('present') }}"
    region: "{{ region }}"
    name: "{{ item.name }}"
    metric: "{{ item.metric  }}"
    namespace: "{{ item.namespace }}"
    statistic: "{{ item.statistic }}"
    comparison: "{{ item.comparison }}"
    threshold: "{{ item.threshold }}"
    period: "{{ item.period }}"
    unit: "{{ item.unit }}"
    evaluation_periods: "{{ item.evaluation_periods }}"
    description: "{{ item.description }}"
    dimensions: "{{ item.dimensions }}"
    alarm_actions:
      - "{{ ec2_scaling_policy_result.results[0].arn }}"
  with_items: "{{ ec2_metric_alarms_up }}"
  register: aws_ec2_metric_alarm_high_result
- debug: var=aws_ec2_metric_alarm_high_result